//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kaomi.ClientConsole.KaomiWCF {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KaomiWCF.IKaomi")]
    public interface IKaomi {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/DownloadAssembly", ReplyAction="http://tempuri.org/IKaomi/DownloadAssemblyResponse")]
        System.IO.FileInfo DownloadAssembly(string assemblyName, System.Uri path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/DownloadAssembly", ReplyAction="http://tempuri.org/IKaomi/DownloadAssemblyResponse")]
        System.Threading.Tasks.Task<System.IO.FileInfo> DownloadAssemblyAsync(string assemblyName, System.Uri path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/CreateAppDomain", ReplyAction="http://tempuri.org/IKaomi/CreateAppDomainResponse")]
        Kaomi.WCF.Model.AppDomainID CreateAppDomain(System.IO.FileInfo path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/CreateAppDomain", ReplyAction="http://tempuri.org/IKaomi/CreateAppDomainResponse")]
        System.Threading.Tasks.Task<Kaomi.WCF.Model.AppDomainID> CreateAppDomainAsync(System.IO.FileInfo path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/ListAppDomains", ReplyAction="http://tempuri.org/IKaomi/ListAppDomainsResponse")]
        string[] ListAppDomains();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/ListAppDomains", ReplyAction="http://tempuri.org/IKaomi/ListAppDomainsResponse")]
        System.Threading.Tasks.Task<string[]> ListAppDomainsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/UnloadAppDomain", ReplyAction="http://tempuri.org/IKaomi/UnloadAppDomainResponse")]
        void UnloadAppDomain(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/UnloadAppDomain", ReplyAction="http://tempuri.org/IKaomi/UnloadAppDomainResponse")]
        System.Threading.Tasks.Task UnloadAppDomainAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IKaomi/GetDataUsingDataContractResponse")]
        Kaomi.WCF.CompositeType GetDataUsingDataContract(Kaomi.WCF.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IKaomi/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Kaomi.WCF.CompositeType> GetDataUsingDataContractAsync(Kaomi.WCF.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKaomiChannel : Kaomi.ClientConsole.KaomiWCF.IKaomi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KaomiClient : System.ServiceModel.ClientBase<Kaomi.ClientConsole.KaomiWCF.IKaomi>, Kaomi.ClientConsole.KaomiWCF.IKaomi {
        
        public KaomiClient() {
        }
        
        public KaomiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KaomiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KaomiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KaomiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.FileInfo DownloadAssembly(string assemblyName, System.Uri path) {
            return base.Channel.DownloadAssembly(assemblyName, path);
        }
        
        public System.Threading.Tasks.Task<System.IO.FileInfo> DownloadAssemblyAsync(string assemblyName, System.Uri path) {
            return base.Channel.DownloadAssemblyAsync(assemblyName, path);
        }
        
        public Kaomi.WCF.Model.AppDomainID CreateAppDomain(System.IO.FileInfo path) {
            return base.Channel.CreateAppDomain(path);
        }
        
        public System.Threading.Tasks.Task<Kaomi.WCF.Model.AppDomainID> CreateAppDomainAsync(System.IO.FileInfo path) {
            return base.Channel.CreateAppDomainAsync(path);
        }
        
        public string[] ListAppDomains() {
            return base.Channel.ListAppDomains();
        }
        
        public System.Threading.Tasks.Task<string[]> ListAppDomainsAsync() {
            return base.Channel.ListAppDomainsAsync();
        }
        
        public void UnloadAppDomain(string id) {
            base.Channel.UnloadAppDomain(id);
        }
        
        public System.Threading.Tasks.Task UnloadAppDomainAsync(string id) {
            return base.Channel.UnloadAppDomainAsync(id);
        }
        
        public Kaomi.WCF.CompositeType GetDataUsingDataContract(Kaomi.WCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Kaomi.WCF.CompositeType> GetDataUsingDataContractAsync(Kaomi.WCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
