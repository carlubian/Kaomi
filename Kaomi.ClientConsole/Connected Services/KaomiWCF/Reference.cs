//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Kaomi.ClientConsole.KaomiWCF {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessID", Namespace="http://schemas.datacontract.org/2004/07/Kaomi.Core.Model")]
    [System.SerializableAttribute()]
    public partial class ProcessID : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KaomiWCF.IKaomi")]
    public interface IKaomi {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/DownloadAssembly", ReplyAction="http://tempuri.org/IKaomi/DownloadAssemblyResponse")]
        System.IO.FileInfo DownloadAssembly(string assemblyName, System.Uri path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/DownloadAssembly", ReplyAction="http://tempuri.org/IKaomi/DownloadAssemblyResponse")]
        System.Threading.Tasks.Task<System.IO.FileInfo> DownloadAssemblyAsync(string assemblyName, System.Uri path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/InstanceProcess", ReplyAction="http://tempuri.org/IKaomi/InstanceProcessResponse")]
        Kaomi.ClientConsole.KaomiWCF.ProcessID InstanceProcess(System.IO.FileInfo app, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/InstanceProcess", ReplyAction="http://tempuri.org/IKaomi/InstanceProcessResponse")]
        System.Threading.Tasks.Task<Kaomi.ClientConsole.KaomiWCF.ProcessID> InstanceProcessAsync(System.IO.FileInfo app, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/ListProcesses", ReplyAction="http://tempuri.org/IKaomi/ListProcessesResponse")]
        string[] ListProcesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/ListProcesses", ReplyAction="http://tempuri.org/IKaomi/ListProcessesResponse")]
        System.Threading.Tasks.Task<string[]> ListProcessesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/UnloadProcess", ReplyAction="http://tempuri.org/IKaomi/UnloadProcessResponse")]
        void UnloadProcess(string process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/UnloadProcess", ReplyAction="http://tempuri.org/IKaomi/UnloadProcessResponse")]
        System.Threading.Tasks.Task UnloadProcessAsync(string process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IKaomi/GetDataUsingDataContractResponse")]
        Kaomi.WCF.CompositeType GetDataUsingDataContract(Kaomi.WCF.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKaomi/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IKaomi/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Kaomi.WCF.CompositeType> GetDataUsingDataContractAsync(Kaomi.WCF.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKaomiChannel : Kaomi.ClientConsole.KaomiWCF.IKaomi, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KaomiClient : System.ServiceModel.ClientBase<Kaomi.ClientConsole.KaomiWCF.IKaomi>, Kaomi.ClientConsole.KaomiWCF.IKaomi {
        
        public KaomiClient() {
        }
        
        public KaomiClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KaomiClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KaomiClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KaomiClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.FileInfo DownloadAssembly(string assemblyName, System.Uri path) {
            return base.Channel.DownloadAssembly(assemblyName, path);
        }
        
        public System.Threading.Tasks.Task<System.IO.FileInfo> DownloadAssemblyAsync(string assemblyName, System.Uri path) {
            return base.Channel.DownloadAssemblyAsync(assemblyName, path);
        }
        
        public Kaomi.ClientConsole.KaomiWCF.ProcessID InstanceProcess(System.IO.FileInfo app, string type) {
            return base.Channel.InstanceProcess(app, type);
        }
        
        public System.Threading.Tasks.Task<Kaomi.ClientConsole.KaomiWCF.ProcessID> InstanceProcessAsync(System.IO.FileInfo app, string type) {
            return base.Channel.InstanceProcessAsync(app, type);
        }
        
        public string[] ListProcesses() {
            return base.Channel.ListProcesses();
        }
        
        public System.Threading.Tasks.Task<string[]> ListProcessesAsync() {
            return base.Channel.ListProcessesAsync();
        }
        
        public void UnloadProcess(string process) {
            base.Channel.UnloadProcess(process);
        }
        
        public System.Threading.Tasks.Task UnloadProcessAsync(string process) {
            return base.Channel.UnloadProcessAsync(process);
        }
        
        public Kaomi.WCF.CompositeType GetDataUsingDataContract(Kaomi.WCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Kaomi.WCF.CompositeType> GetDataUsingDataContractAsync(Kaomi.WCF.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
